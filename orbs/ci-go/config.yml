version: 2.1

description: |
  IPFS is a distributed, content-addressed file system. The ipfs/ci-go Orb is
  the shared CI logic used by our go repos.

  Orb Source - https://github.com/ipfs/ci-helpers/tree/master/orbs/ci-go

environment: &environment
  GIT_PAGER: cat
  GO111MODULE: "on"
  GOPATH: /home/circleci/go
  IPFS_DISTS: https://dist.ipfs.io

executors:
  default:
    description: "The official CircleCI Go Docker image."
    parameters:
      tag:
        description: "The `circleci/golang` Docker image version tag."
        type: string
        default: "1.12.7"
    docker:
      - image: circleci/golang:<< parameters.tag >>
    environment:
      <<: *environment
  golangci:
    description: "GolangCI Linter Image"
    parameters:
      tag:
        description: "GolangCI Version"
        type: string
        default: "v1.17.1"
    docker:
      - image: golangci/golangci-lint:v1.17.1
    environment:
      <<: *environment

commands:
  benchcmp:
    parameters:
      before:
        description: "File containing the old benchmarks."
        type: string
      after:
        description: "File containing the new benchmarks."
        type: string
      tolerance:
        description: "Tolerable slowdown (%)."
        type: integer
        default: 25
    steps:
      - run:
          name: "go get golang.org/x/tools/cmd/benchcmp"
          command: |
            export PATH="$(go env GOPATH)/bin:$PATH"
            which benchcmp >/dev/null 2>&1 || go get golang.org/x/tools/cmd/benchcmp@latest
          working_directory: /tmp
      - run:
          name: "Comparing benchmarks."
          environment:
            BEFORE: << parameters.before >>
            AFTER: << parameters.after >>
          command: |
            export PATH="$(go env GOPATH)/bin:$PATH"
            parse() {
                sed -n \
                    -e 's/ *\t */\t/g' \
                    -e '/^Benchmark/p' |
                    awk 'BEGIN{print "{\"results\": ["} {print "  {\"name\": \"",$1,"\", \"time\": ",$3," },"} END{print "]}"}' OFS="" ORS=" "|
                    sed -e 's/, ]/ ]/g' |
                    jq '.results[] | {name: .name, time: .time }'
            }
            benchcmp "$BEFORE" "$AFTER"
            DIR="$(mktemp -d /tmp/bench.XXXXXX)"
            parse < "$BEFORE" > "$DIR/before.json"
            parse < "$AFTER > "$DIR/after.json"
            set +e # We now care about the exit status.
            echo ""
            echo "Result:"
            cat "$DIR/before.json" "$DIR/after.json" | jq -e -r -s 'group_by(.name)[] | {name: .[0].name, speedup: (.[0].time / .[1].time)} | select(.speedup < (100 - << parameters.tolerance >>)/100) | "\(.name)\t\(.speedup)x"'
            if [[ $? -ne 4 ]]; then
                echo ""
                echo "FAIL"
                exit 1
            else
                echo "PASS"
            fi
  benchmark:
    parameters:
      output:
        description: "File to write the results to."
        type: string
      branch:
        description: "Branch to benchmark."
        type: string
        default: HEAD
      cmd:
        description: "Benchmark command."
        type: string
        default: go test -run=NONE -bench=. ./...
    steps:
      - run:
          name: Check out << parameters.branch >>
          command: |
            mkdir /tmp/benchmark
            git --work-tree=/tmp/benchmark checkout << parameters.branch >> -- .
      - run:
          name: Benchmarking << parameters.branch >>
          command: |
            {
            << parameters.cmd >>
            } | tee << parameters.output >>
          working_directory: /tmp/benchmark
          environment:
            IPFS_LOGGING: critical
      - run:
          when: always
          name: Cleanup
          command: rm -rf /tmp/benchmark
  save-cache:
    description: "Save the go mod & build cache."
    parameters:
      key:
        description: "Cache key."
        type: string
        default: "go"
    steps:
      - save_cache:
          key: v1-<< parameters.key >>-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - ~/go/pkg/mod
      - save_cache:
          key: v1-<< parameters.key >>-{{ arch }}-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - ~/.cache/go-build/
  restore-cache:
    description: "Restore the go mod & build cache."
    parameters:
      key:
        description: "Cache key."
        type: string
        default: "go"
    steps:
      - restore_cache:
          keys:
            - v1-<< parameters.key >>-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CIRCLE_JOB }}
            - v1-<< parameters.key >>-{{ .Branch }}-{{ checksum "go.sum" }}-
            - v1-<< parameters.key >>-{{ .Branch }}-
            - v1-<< parameters.key >>-master-
      - restore_cache:
          keys:
            - v1-<< parameters.key >>-{{ arch }}-{{ .Branch }}-{{ checksum "go.sum" }}-{{ .Environment.CIRCLE_JOB }}
            - v1-<< parameters.key >>-{{ arch }}-{{ .Branch }}-{{ checksum "go.sum" }}-
            - v1-<< parameters.key >>-{{ arch }}-{{ .Branch }}-
            - v1-<< parameters.key >>-{{ arch }}-master-
  check-build:
    description: "Check that the project is buildable"
    parameters:
      package:
        description: "Package to check."
        type: string
        default: "./..."
    steps:
      - run:
          name: "check build"
          command: |
            go list -f '{{if (len .GoFiles)}}{{.ImportPath}} {{if .Module}}{{.Module.Dir}}{{else}}{{.Dir}}{{end}}{{end}}' << parameters.package >> | grep -v /vendor/ |
              while read -r pkg dir; do
              echo '*** go build' "$pkg"
              (
                cd "$dir"
                buildmode=archive
                if [[ "$(go list -f '{{.Name}}')" == "main" ]]; then
                  # plugin works even when a "main" function is missing.
                  buildmode=plugin
                fi
                go build -buildmode=$buildmode -o /dev/null "$pkg"
              )
            done
  lint:
    parameters:
      package:
        description: "Package to test."
        type: string
        default: "./..."
    steps:
      - run:
          name: Run goalngci-lint
          command: golangci-lint run ./...
  test:
    parameters:
      package:
        description: "Package to test."
        type: string
        default: "./..."
      flags:
        description: "Go test flags."
        type: string
        default: ""
      race:
        description: "Enable the race detector."
        type: boolean
        default: false
      coverage:
        description: "Enable coverage collection."
        type: boolean
        default: true
    steps:
      - run:
          name: "Make test results directory."
          command: |
            mkdir -p /tmp/test-results/${CIRCLE_JOB}
      - run:
          name: "Run go unit tests."
          command: |
            gotestsum \
              --junitfile "$(mktemp /tmp/test-results/${CIRCLE_JOB}/go-test.${CIRCLE_NODE_ID}.XXXXXX.xml)" \
              -- -v << parameters.flags >> \
              <<# parameters.race >> -race <</parameters.race >> \
              <<# parameters.coverage >> \
              -coverprofile="/tmp/gotest.coverprofile" \
              -covermode=atomic \
              <</ parameters.coverage >> \
              $(go list -f '{{if or (len .TestGoFiles) (len .XTestGoFiles)}}{{.ImportPath}}{{end}}' ./... | grep -v /vendor/ || true | circleci tests split --split-by=timings)
      - store_test_results:
          when: always
          path: /tmp/test-results
      - when:
          condition: << parameters.coverage >>
          steps:
            - run:
                name: "Uploading coverage."
                command: |
                  bash <(curl -s https://codecov.io/bash) -cF unittests -X search -f /tmp/gotest.coverprofile

# Reset the environment so the user can override the executor without
# having to reconfigure it.
jobs:
  lint:
    executor: golangci
    environment:
      <<: *environment
    steps:
      - checkout
      - restore-cache
      - lint
      - save-cache
  build:
    parameters:
      executor:
        description: "Configure the executor for this job"
        type: executor
        default: default
    executor: << parameters.executor >>
    environment:
      <<: *environment
    steps:
      - checkout
      - restore-cache
      - check-build
      - save-cache
  test:
    parameters:
      executor:
        description: "Configure the executor for this job"
        type: executor
        default: default
      race:
        description: "Enable the race detector."
        type: boolean
        default: false
    executor: << parameters.executor >>
    environment:
      <<: *environment
    steps:
      - checkout
      - restore-cache
      - test:
          race: << parameters.race >>
      - save-cache
  benchmark:
    parameters:
      tolerance:
        description: "Tolerable slowdown (%)."
        type: integer
        default: 25
      baseline:
        description: "Baseline branch to which to compare (if any)."
        type: string
        default: ""
      cmd:
        description: "Benchmark command."
        type: string
        default: go test -run=NONE -bench=. ./...
    executor: default
    steps:
      - checkout
      - restore-cache
      - benchmark:
          cmd: << parameters.cmd >>
          branch: master
          output: /tmp/benchmark-before.txt
      - benchmark:
          cmd: << parameters.cmd >>
          output: /tmp/benchmark-after.txt
      - benchcmp:
          before: /tmp/benchmark-before.txt
          after: /tmp/benchmark-after.txt
          tolerance: << parameters.tolerance >>
      - when:
          condition: << parameters.baseline >>
          steps:
            - benchmark:
                cmd: << parameters.cmd >>
                branch: << parameters.baseline >>
                output: /tmp/benchmark-baseline.txt
            - benchcmp:
                before: /tmp/benchmark-baseline.txt
                after: /tmp/benchmark-after.txt
                tolerance: << parameters.tolerance >>
      - save-cache

examples:
  build-and-test:
    description: "Simple build and test example."
    usage:
      version: 2.1
      orbs:
        ci-go: ipfs/ci-go@1
      workflows:
        test:
          jobs:
            - ci-go/build
            - ci-go/test
            - ci-go/lint
            - benchmark:
                requires:
                  - ci-go/test
